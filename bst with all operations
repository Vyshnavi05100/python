class Node:
    def __init__(self,data):
        self.data =data
        self.left=None
        self.right=None

class bst:
    def __init__(self):
        self.root = None

    def insert(self,data):
        self.root = self.rec_insert(self.root,data)

    def rec_insert(self,root,data):

        if root is None:
            return Node(data)
        if root.data >data:
            root.left = self.rec_insert(root.left,data)
        else:
            root.right = self.rec_insert(root.right,data)
        return root

    def inorder(self):
        def rec_inorder(root):
            if root:
                rec_inorder(root.left)
                print(root.data,end=" ")
                rec_inorder(root.right)
        rec_inorder(self.root)
    def sum(self,root):
        if not root:  return 0
        return root.data + self.sum(root.left)

    def count(self, root):
        if not root:  return 0
        return 1 + self.count(root.left) + self.count(root.right)

    def height(self, root):
        if not root:  return 0
        return 1 + max(self.height(root.left) , self.height(root.right))
        
    def min(self,root):
        if root is None:
            print("No data")
        while root.left:
            root=root.left
        print(root.data)
        
    def max(self,root):
        if root is None:
            print("no data")
        while root.right:
            root=root.right
        print(root.data)
        
    def find(self,root,key):
        if root is None or root.data==key:
            return root
        if key<root.data:
            return self.find(root.left,key)
        else:
            return self.find(root.right,key)
            
    def delete(self,key):
        self.root=self.rec_delete(self.root,key)
    def rec_delete(self,root,key):
        if root:
            if root.data>key:
                root.left=self.rec_delete(root.left,key)
                
            elif root.data<key:
                root.right=self.rec_delete(root.right,key)
            
            else:
                
                if root.left is None:
                    return root.right
                elif root.right is None:
                    return root.left
                
            max_val=self.max(root.left)
            root.data=max_val
            self.rec_delete(root.left,max_val)
        self.root
            
obj = bst()
obj.insert(25)
obj.insert(60)
obj.insert(70)
obj.insert(6)
obj.insert(4)
obj.insert(30)
obj.insert(10)
obj.insert(5)
obj.insert(29)
obj.insert(40)


obj.inorder()
print()
print( obj.sum(obj.root) )
print( obj.count(obj.root) )
print( obj.height(obj.root)-1 )
print(obj.min(obj.root))
print(obj.max(obj.root))
obj.delete(obj.root,5)
print(obj.find(obj.root,30))
